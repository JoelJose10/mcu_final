
mcu_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ec  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080036cc  080036cc  000046cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f8  080036f8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036f8  080036f8  000046f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003700  08003700  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003708  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003770  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000260  08003770  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d54  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ff  00000000  00000000  0000edec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  000105f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d5  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a89  00000000  00000000  00011375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a80e  00000000  00000000  00033dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e78  00000000  00000000  0003e60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002410  00000000  00000000  001134c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001158d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080036b4 	.word	0x080036b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080036b4 	.word	0x080036b4

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000550:	f3bf 8f4f 	dsb	sy
}
 8000554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000556:	f3bf 8f6f 	isb	sy
}
 800055a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <SCB_EnableICache+0x48>)
 800055e:	2200      	movs	r2, #0
 8000560:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000564:	f3bf 8f4f 	dsb	sy
}
 8000568:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800056a:	f3bf 8f6f 	isb	sy
}
 800056e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <SCB_EnableICache+0x48>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <SCB_EnableICache+0x48>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000582:	f3bf 8f6f 	isb	sy
}
 8000586:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800059e:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SCB_EnableDCache+0x84>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <SCB_EnableDCache+0x84>)
 80005ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005b2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	0b5b      	lsrs	r3, r3, #13
 80005b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005bc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	08db      	lsrs	r3, r3, #3
 80005c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005c6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	015a      	lsls	r2, r3, #5
 80005cc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005d0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005d6:	4911      	ldr	r1, [pc, #68]	@ (800061c <SCB_EnableDCache+0x84>)
 80005d8:	4313      	orrs	r3, r2
 80005da:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1e5a      	subs	r2, r3, #1
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1ef      	bne.n	80005c8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	60fa      	str	r2, [r7, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1e5      	bne.n	80005be <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005f2:	f3bf 8f4f 	dsb	sy
}
 80005f6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f8:	4b08      	ldr	r3, [pc, #32]	@ (800061c <SCB_EnableDCache+0x84>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a07      	ldr	r2, [pc, #28]	@ (800061c <SCB_EnableDCache+0x84>)
 80005fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000602:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000604:	f3bf 8f4f 	dsb	sy
}
 8000608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060a:	f3bf 8f6f 	isb	sy
}
 800060e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Implement the required functions for printf and I/O operations
int _write(int file, char *ptr, int len) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < len; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e00a      	b.n	8000648 <_write+0x28>
        HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);  // For STM32, use UART to send characters to the terminal
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	b29a      	uxth	r2, r3
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	4807      	ldr	r0, [pc, #28]	@ (800065c <_write+0x3c>)
 800063e:	f001 fec7 	bl	80023d0 <HAL_UART_Transmit>
    for (i = 0; i < len; i++) {
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf0      	blt.n	8000632 <_write+0x12>
    }
    return len;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000084 	.word	0x20000084

08000660 <_read>:

int _read(int file, char *ptr, int len) {
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
    // Implement as necessary, return 0 if not required
    return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <_close>:

int _close(int file) {
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
    // Close function implementation (if needed)
    return -1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
    // lseek implementation (if needed)
    return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <_fstat>:

int _fstat(int file, struct stat *st) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    // fstat implementation (if needed)
    return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_isatty>:

int _isatty(int file) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    // isatty implementation (if needed)
    return 1;
 80006cc:	2301      	movs	r3, #1
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <main>:

// Your main function where you use printf
int main(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* MPU Configuration */
    MPU_Config();
 80006e0:	f000 f8e8 	bl	80008b4 <MPU_Config>

    /* Enable the CPU Cache */
    SCB_EnableICache();
 80006e4:	f7ff ff32 	bl	800054c <SCB_EnableICache>
    SCB_EnableDCache();
 80006e8:	f7ff ff56 	bl	8000598 <SCB_EnableDCache>

    /* MCU Configuration */
    HAL_Init();  // Initialize the HAL Library
 80006ec:	f000 fa43 	bl	8000b76 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80006f0:	f000 f814 	bl	800071c <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80006f4:	f000 f8ae 	bl	8000854 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 80006f8:	f000 f87c 	bl	80007f4 <MX_USART3_UART_Init>
    MX_X_CUBE_AI_Init();  // Initialize AI module
 80006fc:	f002 fb20 	bl	8002d40 <MX_X_CUBE_AI_Init>

    /* USER CODE END 1 */

    /* Infinite loop */
    while (1) {
        printf("Hello from STM32!\r\n");
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <main+0x3c>)
 8000702:	f002 fc43 	bl	8002f8c <puts>
        HAL_Delay(1000);  // Delay to prevent spamming
 8000706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070a:	f000 fa91 	bl	8000c30 <HAL_Delay>

        MX_X_CUBE_AI_Process();  // AI processing loop
 800070e:	f002 fb1e 	bl	8002d4e <MX_X_CUBE_AI_Process>
        printf("Hello from STM32!\r\n");
 8000712:	bf00      	nop
 8000714:	e7f4      	b.n	8000700 <main+0x24>
 8000716:	bf00      	nop
 8000718:	080036cc 	.word	0x080036cc

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	@ 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fd0e 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /* Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a29      	ldr	r2, [pc, #164]	@ (80007ec <SystemClock_Config+0xd0>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <SystemClock_Config+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a24      	ldr	r2, [pc, #144]	@ (80007f0 <SystemClock_Config+0xd4>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /* Initializes the RCC Oscillators according to the specified parameters */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000788:	23d8      	movs	r3, #216	@ 0xd8
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000790:	2309      	movs	r3, #9
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fdb7 	bl	800130c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a4:	f000 f8b2 	bl	800090c <Error_Handler>
  }

  /* Activate the Over-Drive mode */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a8:	f000 fd60 	bl	800126c <HAL_PWREx_EnableOverDrive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007b2:	f000 f8ab 	bl	800090c <Error_Handler>
  }

  /* Initializes the CPU, AHB, and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2107      	movs	r1, #7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f83d 	bl	8001854 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007e0:	f000 f894 	bl	800090c <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	@ 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART3_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <MX_USART3_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000838:	f001 fd7c 	bl	8002334 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f863 	bl	800090c <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000084 	.word	0x20000084
 8000850:	40004800 	.word	0x40004800

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a14      	ldr	r2, [pc, #80]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_GPIO_Init+0x5c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */
void MPU_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008c6:	f000 fabd 	bl	8000e44 <HAL_MPU_Disable>

  /* Initializes and configures the Region and the memory to be protected */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008d6:	231f      	movs	r3, #31
 80008d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008da:	2387      	movs	r3, #135	@ 0x87
 80008dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008de:	2300      	movs	r3, #0
 80008e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008e2:	2300      	movs	r3, #0
 80008e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fadb 	bl	8000eb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008fe:	2004      	movs	r0, #4
 8000900:	f000 fab8 	bl	8000e74 <HAL_MPU_Enable>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    printf("Hello from STM32!\r\n");  // Print message
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <Error_Handler+0x1c>)
 8000916:	f002 fb39 	bl	8002f8c <puts>
    HAL_Delay(1000);                 // 1-second delay
 800091a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800091e:	f000 f987 	bl	8000c30 <HAL_Delay>
    printf("Hello from STM32!\r\n");  // Print message
 8000922:	bf00      	nop
 8000924:	e7f6      	b.n	8000914 <Error_Handler+0x8>
 8000926:	bf00      	nop
 8000928:	080036cc 	.word	0x080036cc

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x44>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x44>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0aa      	sub	sp, #168	@ 0xa8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2280      	movs	r2, #128	@ 0x80
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fbd9 	bl	800314c <memset>
  if(huart->Instance==USART3)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <HAL_UART_MspInit+0xb4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d13c      	bne.n	8000a1e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f974 	bl	8001ca0 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009be:	f7ff ffa5 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <HAL_UART_MspInit+0xb8>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_UART_MspInit+0xb8>)
 80009c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0xb8>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_UART_MspInit+0xb8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <HAL_UART_MspInit+0xb8>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_UART_MspInit+0xb8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80009f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_UART_MspInit+0xbc>)
 8000a1a:	f000 fa8b 	bl	8000f34 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a1e:	bf00      	nop
 8000a20:	37a8      	adds	r7, #168	@ 0xa8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020800 	.word	0x40020800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f8b1 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f002 fb90 	bl	80031e8 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20040000 	.word	0x20040000
 8000af4:	00000800 	.word	0x00000800
 8000af8:	2000010c 	.word	0x2000010c
 8000afc:	20000260 	.word	0x20000260

08000b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000b28:	f7ff ffea 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	@ (8000b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b52:	f002 fb4f 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fdc1 	bl	80006dc <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b68:	08003708 	.word	0x08003708
  ldr r2, =_sbss
 8000b6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b70:	20000260 	.word	0x20000260

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>

08000b76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f92e 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b80:	200f      	movs	r0, #15
 8000b82:	f000 f805 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b86:	f7ff fed1 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f93b 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f911 	bl	8000df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000110 	.word	0x20000110

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000110 	.word	0x20000110

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	05fa0000 	.word	0x05fa0000

08000cc0 <__NVIC_GetPriorityGrouping>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_SetPriority>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	@ (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	@ 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff47 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff5c 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff8e 	bl	8000d30 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5d 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffb0 	bl	8000d98 <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e48:	f3bf 8f5f 	dmb	sy
}
 8000e4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <HAL_MPU_Disable+0x28>)
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <HAL_MPU_Disable+0x28>)
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e58:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_MPU_Disable+0x2c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	e000ed90 	.word	0xe000ed90

08000e74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <HAL_MPU_Enable+0x38>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <HAL_MPU_Enable+0x3c>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	4a09      	ldr	r2, [pc, #36]	@ (8000eb0 <HAL_MPU_Enable+0x3c>)
 8000e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e92:	f3bf 8f4f 	dsb	sy
}
 8000e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e98:	f3bf 8f6f 	isb	sy
}
 8000e9c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed90 	.word	0xe000ed90
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	785a      	ldrb	r2, [r3, #1]
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <HAL_MPU_ConfigRegion+0x7c>)
 8000ec2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_MPU_ConfigRegion+0x7c>)
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <HAL_MPU_ConfigRegion+0x7c>)
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ed0:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_MPU_ConfigRegion+0x7c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7b1b      	ldrb	r3, [r3, #12]
 8000edc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7adb      	ldrb	r3, [r3, #11]
 8000ee2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7a9b      	ldrb	r3, [r3, #10]
 8000eea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7b5b      	ldrb	r3, [r3, #13]
 8000ef2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7b9b      	ldrb	r3, [r3, #14]
 8000efa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7bdb      	ldrb	r3, [r3, #15]
 8000f02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7a5b      	ldrb	r3, [r3, #9]
 8000f0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7a1b      	ldrb	r3, [r3, #8]
 8000f12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f20:	6113      	str	r3, [r2, #16]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed90 	.word	0xe000ed90

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e169      	b.n	8001228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8158 	bne.w	8001222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x56>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80b2 	beq.w	8001222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b60      	ldr	r3, [pc, #384]	@ (8001240 <HAL_GPIO_Init+0x30c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001240 <HAL_GPIO_Init+0x30c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001240 <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001244 <HAL_GPIO_Init+0x310>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a52      	ldr	r2, [pc, #328]	@ (8001248 <HAL_GPIO_Init+0x314>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d02b      	beq.n	800115a <HAL_GPIO_Init+0x226>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a51      	ldr	r2, [pc, #324]	@ (800124c <HAL_GPIO_Init+0x318>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x222>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a50      	ldr	r2, [pc, #320]	@ (8001250 <HAL_GPIO_Init+0x31c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x21e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4f      	ldr	r2, [pc, #316]	@ (8001254 <HAL_GPIO_Init+0x320>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4e      	ldr	r2, [pc, #312]	@ (8001258 <HAL_GPIO_Init+0x324>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x216>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4d      	ldr	r2, [pc, #308]	@ (800125c <HAL_GPIO_Init+0x328>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x212>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4c      	ldr	r2, [pc, #304]	@ (8001260 <HAL_GPIO_Init+0x32c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4b      	ldr	r2, [pc, #300]	@ (8001264 <HAL_GPIO_Init+0x330>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x20a>
 800113a:	2307      	movs	r3, #7
 800113c:	e00e      	b.n	800115c <HAL_GPIO_Init+0x228>
 800113e:	2308      	movs	r3, #8
 8001140:	e00c      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001142:	2306      	movs	r3, #6
 8001144:	e00a      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x228>
 800114a:	2304      	movs	r3, #4
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x228>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x228>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	@ (8001244 <HAL_GPIO_Init+0x310>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b3b      	ldr	r3, [pc, #236]	@ (8001268 <HAL_GPIO_Init+0x334>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a32      	ldr	r2, [pc, #200]	@ (8001268 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <HAL_GPIO_Init+0x334>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a27      	ldr	r2, [pc, #156]	@ (8001268 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ce:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <HAL_GPIO_Init+0x334>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_GPIO_Init+0x334>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_GPIO_Init+0x334>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <HAL_GPIO_Init+0x334>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f ae92 	bls.w	8000f54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	@ 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_PWREx_EnableOverDrive+0x98>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_PWREx_EnableOverDrive+0x98>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_PWREx_EnableOverDrive+0x98>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129a:	f7ff fcbd 	bl	8000c18 <HAL_GetTick>
 800129e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012a0:	e009      	b.n	80012b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012a2:	f7ff fcb9 	bl	8000c18 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b0:	d901      	bls.n	80012b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e022      	b.n	80012fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c2:	d1ee      	bne.n	80012a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff fca2 	bl	8000c18 <HAL_GetTick>
 80012d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012d6:	e009      	b.n	80012ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012d8:	f7ff fc9e 	bl	8000c18 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012e6:	d901      	bls.n	80012ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e007      	b.n	80012fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012f8:	d1ee      	bne.n	80012d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e291      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8087 	beq.w	800143e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001330:	4b96      	ldr	r3, [pc, #600]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b04      	cmp	r3, #4
 800133a:	d00c      	beq.n	8001356 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133c:	4b93      	ldr	r3, [pc, #588]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d112      	bne.n	800136e <HAL_RCC_OscConfig+0x62>
 8001348:	4b90      	ldr	r3, [pc, #576]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001354:	d10b      	bne.n	800136e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b8d      	ldr	r3, [pc, #564]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d06c      	beq.n	800143c <HAL_RCC_OscConfig+0x130>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d168      	bne.n	800143c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e26b      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x7a>
 8001378:	4b84      	ldr	r3, [pc, #528]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a83      	ldr	r2, [pc, #524]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e02e      	b.n	80013e4 <HAL_RCC_OscConfig+0xd8>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x9c>
 800138e:	4b7f      	ldr	r3, [pc, #508]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7e      	ldr	r2, [pc, #504]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b7c      	ldr	r3, [pc, #496]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a7b      	ldr	r2, [pc, #492]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xd8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0xc0>
 80013b2:	4b76      	ldr	r3, [pc, #472]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a75      	ldr	r2, [pc, #468]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b73      	ldr	r3, [pc, #460]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a72      	ldr	r2, [pc, #456]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xd8>
 80013cc:	4b6f      	ldr	r3, [pc, #444]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6e      	ldr	r2, [pc, #440]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b6c      	ldr	r3, [pc, #432]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a6b      	ldr	r2, [pc, #428]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc14 	bl	8000c18 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc10 	bl	8000c18 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e21f      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b61      	ldr	r3, [pc, #388]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe8>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fc00 	bl	8000c18 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fbfc 	bl	8000c18 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e20b      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b57      	ldr	r3, [pc, #348]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x110>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d069      	beq.n	800151e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144a:	4b50      	ldr	r3, [pc, #320]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b4d      	ldr	r3, [pc, #308]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x190>
 8001462:	4b4a      	ldr	r3, [pc, #296]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b47      	ldr	r3, [pc, #284]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x17a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1df      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b41      	ldr	r3, [pc, #260]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	493d      	ldr	r1, [pc, #244]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e040      	b.n	800151e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b39      	ldr	r3, [pc, #228]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a38      	ldr	r2, [pc, #224]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fbb2 	bl	8000c18 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fbae 	bl	8000c18 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1bd      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b30      	ldr	r3, [pc, #192]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4929      	ldr	r1, [pc, #164]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
 80014ea:	e018      	b.n	800151e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a26      	ldr	r2, [pc, #152]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb8e 	bl	8000c18 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fb8a 	bl	8000c18 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e199      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d038      	beq.n	800159c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d019      	beq.n	8001566 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001536:	4a15      	ldr	r2, [pc, #84]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff fb6b 	bl	8000c18 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fb67 	bl	8000c18 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e176      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800155a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x23a>
 8001564:	e01a      	b.n	800159c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 8001568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_RCC_OscConfig+0x280>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff fb51 	bl	8000c18 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fb4d 	bl	8000c18 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d903      	bls.n	8001590 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e15c      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
 800158c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b91      	ldr	r3, [pc, #580]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a4 	beq.w	80016f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015aa:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10d      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b88      	ldr	r3, [pc, #544]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a87      	ldr	r2, [pc, #540]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b85      	ldr	r3, [pc, #532]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d2:	4b82      	ldr	r3, [pc, #520]	@ (80017dc <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015de:	4b7f      	ldr	r3, [pc, #508]	@ (80017dc <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7e      	ldr	r2, [pc, #504]	@ (80017dc <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb15 	bl	8000c18 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fb11 	bl	8000c18 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b64      	cmp	r3, #100	@ 0x64
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e120      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001604:	4b75      	ldr	r3, [pc, #468]	@ (80017dc <HAL_RCC_OscConfig+0x4d0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x31a>
 8001618:	4b6f      	ldr	r3, [pc, #444]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	4a6e      	ldr	r2, [pc, #440]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	@ 0x70
 8001624:	e02d      	b.n	8001682 <HAL_RCC_OscConfig+0x376>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x33c>
 800162e:	4b6a      	ldr	r3, [pc, #424]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	4a69      	ldr	r2, [pc, #420]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6713      	str	r3, [r2, #112]	@ 0x70
 800163a:	4b67      	ldr	r3, [pc, #412]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	4a66      	ldr	r2, [pc, #408]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6713      	str	r3, [r2, #112]	@ 0x70
 8001646:	e01c      	b.n	8001682 <HAL_RCC_OscConfig+0x376>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x35e>
 8001650:	4b61      	ldr	r3, [pc, #388]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001654:	4a60      	ldr	r2, [pc, #384]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6713      	str	r3, [r2, #112]	@ 0x70
 800165c:	4b5e      	ldr	r3, [pc, #376]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001660:	4a5d      	ldr	r2, [pc, #372]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	@ 0x70
 8001668:	e00b      	b.n	8001682 <HAL_RCC_OscConfig+0x376>
 800166a:	4b5b      	ldr	r3, [pc, #364]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166e:	4a5a      	ldr	r2, [pc, #360]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6713      	str	r3, [r2, #112]	@ 0x70
 8001676:	4b58      	ldr	r3, [pc, #352]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	4a57      	ldr	r2, [pc, #348]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d015      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7ff fac5 	bl	8000c18 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff fac1 	bl	8000c18 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e0ce      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a8:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ee      	beq.n	8001692 <HAL_RCC_OscConfig+0x386>
 80016b4:	e014      	b.n	80016e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff faaf 	bl	8000c18 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff faab 	bl	8000c18 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d4:	4b40      	ldr	r3, [pc, #256]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e6:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a3b      	ldr	r2, [pc, #236]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80016ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80a4 	beq.w	8001844 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d06b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d149      	bne.n	80017a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a30      	ldr	r2, [pc, #192]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800171a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fa7c 	bl	8000c18 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fa78 	bl	8000c18 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e087      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	4313      	orrs	r3, r2
 8001768:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 800176a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800176e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800177a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fa4c 	bl	8000c18 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fa48 	bl	8000c18 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e057      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x478>
 80017a2:	e04f      	b.n	8001844 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa32 	bl	8000c18 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fa2e 	bl	8000c18 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e03d      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4ac>
 80017d6:	e035      	b.n	8001844 <HAL_RCC_OscConfig+0x538>
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_RCC_OscConfig+0x544>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d028      	beq.n	8001840 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d121      	bne.n	8001840 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001816:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001818:	4293      	cmp	r3, r2
 800181a:	d111      	bne.n	8001840 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	3b01      	subs	r3, #1
 800182a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0d0      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d910      	bls.n	800189c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b67      	ldr	r3, [pc, #412]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 020f 	bic.w	r2, r3, #15
 8001882:	4965      	ldr	r1, [pc, #404]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b63      	ldr	r3, [pc, #396]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b8      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b4:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a58      	ldr	r2, [pc, #352]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018cc:	4b53      	ldr	r3, [pc, #332]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a52      	ldr	r2, [pc, #328]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b50      	ldr	r3, [pc, #320]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	494d      	ldr	r1, [pc, #308]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d040      	beq.n	8001978 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e073      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06b      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4936      	ldr	r1, [pc, #216]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001948:	f7ff f966 	bl	8000c18 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f962 	bl	8000c18 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e053      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d210      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 020f 	bic.w	r2, r3, #15
 800198e:	4922      	ldr	r1, [pc, #136]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e032      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4916      	ldr	r1, [pc, #88]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490e      	ldr	r1, [pc, #56]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e6:	f000 f821 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490a      	ldr	r1, [pc, #40]	@ (8001a20 <HAL_RCC_ClockConfig+0x1cc>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <HAL_RCC_ClockConfig+0x1d0>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_RCC_ClockConfig+0x1d4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f8c2 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	080036e0 	.word	0x080036e0
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a30:	b094      	sub	sp, #80	@ 0x50
 8001a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a44:	4b79      	ldr	r3, [pc, #484]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d00d      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x40>
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	f200 80e1 	bhi.w	8001c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5e:	e0db      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b73      	ldr	r3, [pc, #460]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a64:	e0db      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a66:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a6a:	e0d8      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a76:	4b6d      	ldr	r3, [pc, #436]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a82:	4b6a      	ldr	r3, [pc, #424]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	2200      	movs	r2, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	462b      	mov	r3, r5
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	0159      	lsls	r1, r3, #5
 8001aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab0:	0150      	lsls	r0, r2, #5
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	1a51      	subs	r1, r2, r1
 8001aba:	6139      	str	r1, [r7, #16]
 8001abc:	4629      	mov	r1, r5
 8001abe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad0:	4659      	mov	r1, fp
 8001ad2:	018b      	lsls	r3, r1, #6
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ada:	4651      	mov	r1, sl
 8001adc:	018a      	lsls	r2, r1, #6
 8001ade:	4651      	mov	r1, sl
 8001ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afe:	4690      	mov	r8, r2
 8001b00:	4699      	mov	r9, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	eb18 0303 	adds.w	r3, r8, r3
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	462b      	mov	r3, r5
 8001b0c:	eb49 0303 	adc.w	r3, r9, r3
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	024b      	lsls	r3, r1, #9
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b28:	4621      	mov	r1, r4
 8001b2a:	024a      	lsls	r2, r1, #9
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b32:	2200      	movs	r2, #0
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b3c:	f7fe fb70 	bl	8000220 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b48:	e058      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	2200      	movs	r2, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	4611      	mov	r1, r2
 8001b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b64:	4642      	mov	r2, r8
 8001b66:	464b      	mov	r3, r9
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0159      	lsls	r1, r3, #5
 8001b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b76:	0150      	lsls	r0, r2, #5
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b82:	4649      	mov	r1, r9
 8001b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	00eb      	lsls	r3, r5, #3
 8001bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb2:	00e2      	lsls	r2, r4, #3
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	18e3      	adds	r3, r4, r3
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	eb45 0303 	adc.w	r3, r5, r3
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	028b      	lsls	r3, r1, #10
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bdc:	4621      	mov	r1, r4
 8001bde:	028a      	lsls	r2, r1, #10
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be6:	2200      	movs	r2, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	61fa      	str	r2, [r7, #28]
 8001bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf0:	f7fe fb16 	bl	8000220 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	3301      	adds	r3, #1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c16:	e002      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3750      	adds	r7, #80	@ 0x50
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	007a1200 	.word	0x007a1200

08001c38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4903      	ldr	r1, [pc, #12]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	080036f0 	.word	0x080036f0

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffdc 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	@ (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	080036f0 	.word	0x080036f0

08001ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cc4:	4b65      	ldr	r3, [pc, #404]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a64      	ldr	r2, [pc, #400]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cce:	6093      	str	r3, [r2, #8]
 8001cd0:	4b62      	ldr	r3, [pc, #392]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	4960      	ldr	r1, [pc, #384]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d017      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf6:	4b59      	ldr	r3, [pc, #356]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cfc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d04:	4955      	ldr	r1, [pc, #340]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d14:	d101      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d017      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d32:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	4946      	ldr	r1, [pc, #280]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 808b 	beq.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	4a39      	ldr	r2, [pc, #228]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7c:	4b37      	ldr	r3, [pc, #220]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d88:	4b35      	ldr	r3, [pc, #212]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a34      	ldr	r2, [pc, #208]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7fe ff40 	bl	8000c18 <HAL_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7fe ff3c 	bl	8000c18 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e2bc      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dae:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d035      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d02e      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001de0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dfa:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d114      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff04 	bl	8000c18 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7fe ff00 	bl	8000c18 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e27e      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ee      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e42:	d111      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e52:	400b      	ands	r3, r1
 8001e54:	4901      	ldr	r1, [pc, #4]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000
 8001e64:	0ffffcff 	.word	0x0ffffcff
 8001e68:	4ba4      	ldr	r3, [pc, #656]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4aa3      	ldr	r2, [pc, #652]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e6e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e72:	6093      	str	r3, [r2, #8]
 8001e74:	4ba1      	ldr	r3, [pc, #644]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	499e      	ldr	r1, [pc, #632]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e92:	4b9a      	ldr	r3, [pc, #616]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e98:	4a98      	ldr	r2, [pc, #608]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea2:	4b96      	ldr	r3, [pc, #600]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ea4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	4993      	ldr	r1, [pc, #588]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	498b      	ldr	r1, [pc, #556]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee2:	4b86      	ldr	r3, [pc, #536]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef0:	4982      	ldr	r1, [pc, #520]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f04:	4b7d      	ldr	r3, [pc, #500]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f12:	497a      	ldr	r1, [pc, #488]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f26:	4b75      	ldr	r3, [pc, #468]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	f023 0203 	bic.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	4971      	ldr	r1, [pc, #452]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f48:	4b6c      	ldr	r3, [pc, #432]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f023 020c 	bic.w	r2, r3, #12
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4969      	ldr	r1, [pc, #420]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f6a:	4b64      	ldr	r3, [pc, #400]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f78:	4960      	ldr	r1, [pc, #384]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9a:	4958      	ldr	r1, [pc, #352]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fae:	4b53      	ldr	r3, [pc, #332]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	494f      	ldr	r1, [pc, #316]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fde:	4947      	ldr	r1, [pc, #284]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ff2:	4b42      	ldr	r3, [pc, #264]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	493e      	ldr	r1, [pc, #248]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002014:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	4936      	ldr	r1, [pc, #216]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002036:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002044:	492d      	ldr	r1, [pc, #180]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002054:	d101      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002066:	4b25      	ldr	r3, [pc, #148]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002074:	4921      	ldr	r1, [pc, #132]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002096:	4919      	ldr	r1, [pc, #100]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020b8:	4910      	ldr	r1, [pc, #64]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d006      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 809d 	beq.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e0:	f7fe fd9a 	bl	8000c18 <HAL_GetTick>
 80020e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020e6:	e00b      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020e8:	f7fe fd96 	bl	8000c18 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d904      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e116      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002100:	4b8b      	ldr	r3, [pc, #556]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ed      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002120:	4b83      	ldr	r3, [pc, #524]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002126:	0e1b      	lsrs	r3, r3, #24
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	019a      	lsls	r2, r3, #6
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	497b      	ldr	r1, [pc, #492]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002172:	d11f      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002174:	4b6e      	ldr	r3, [pc, #440]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800217a:	0f1b      	lsrs	r3, r3, #28
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	019a      	lsls	r2, r3, #6
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	431a      	orrs	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	071b      	lsls	r3, r3, #28
 8002194:	4966      	ldr	r1, [pc, #408]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800219c:	4b64      	ldr	r3, [pc, #400]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a2:	f023 021f 	bic.w	r2, r3, #31
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4960      	ldr	r1, [pc, #384]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00d      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	019a      	lsls	r2, r3, #6
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	071b      	lsls	r3, r3, #28
 80021d4:	4956      	ldr	r1, [pc, #344]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021dc:	4b54      	ldr	r3, [pc, #336]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a53      	ldr	r2, [pc, #332]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e8:	f7fe fd16 	bl	8000c18 <HAL_GetTick>
 80021ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021f0:	f7fe fd12 	bl	8000c18 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e092      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002202:	4b4b      	ldr	r3, [pc, #300]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b01      	cmp	r3, #1
 8002212:	f040 8088 	bne.w	8002326 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002216:	4b46      	ldr	r3, [pc, #280]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a45      	ldr	r2, [pc, #276]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002222:	f7fe fcf9 	bl	8000c18 <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800222a:	f7fe fcf5 	bl	8000c18 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	@ 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e075      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800223c:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002248:	d0ef      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	2b00      	cmp	r3, #0
 8002270:	d120      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002272:	4b2f      	ldr	r3, [pc, #188]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	019a      	lsls	r2, r3, #6
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	4927      	ldr	r1, [pc, #156]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800229a:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	4920      	ldr	r1, [pc, #128]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d018      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c8:	d113      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022ca:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	019a      	lsls	r2, r3, #6
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	431a      	orrs	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4911      	ldr	r1, [pc, #68]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fe:	f7fe fc8b 	bl	8000c18 <HAL_GetTick>
 8002302:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002306:	f7fe fc87 	bl	8000c18 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	@ 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e007      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002324:	d1ef      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e040      	b.n	80023c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fb0c 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	@ 0x24
 8002360:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fb16 	bl	80029ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8af 	bl	80024e4 <UART_SetConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e01b      	b.n	80023c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800239e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb95 	bl	8002af0 <UART_CheckIdleState>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	@ 0x28
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d177      	bne.n	80024d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_UART_Transmit+0x24>
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e070      	b.n	80024da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2221      	movs	r2, #33	@ 0x21
 8002404:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002406:	f7fe fc07 	bl	8000c18 <HAL_GetTick>
 800240a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002424:	d108      	bne.n	8002438 <HAL_UART_Transmit+0x68>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d104      	bne.n	8002438 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	e003      	b.n	8002440 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002440:	e02f      	b.n	80024a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	@ 0x80
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fba6 	bl	8002b9e <UART_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e03b      	b.n	80024da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3302      	adds	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e007      	b.n	8002490 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1c9      	bne.n	8002442 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2140      	movs	r1, #64	@ 0x40
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fb70 	bl	8002b9e <UART_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e005      	b.n	80024da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4ba6      	ldr	r3, [pc, #664]	@ (80027a8 <UART_SetConfig+0x2c4>)
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	430b      	orrs	r3, r1
 800251a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	430a      	orrs	r2, r1
 8002554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a94      	ldr	r2, [pc, #592]	@ (80027ac <UART_SetConfig+0x2c8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d120      	bne.n	80025a2 <UART_SetConfig+0xbe>
 8002560:	4b93      	ldr	r3, [pc, #588]	@ (80027b0 <UART_SetConfig+0x2cc>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b03      	cmp	r3, #3
 800256c:	d816      	bhi.n	800259c <UART_SetConfig+0xb8>
 800256e:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <UART_SetConfig+0x90>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	08002585 	.word	0x08002585
 8002578:	08002591 	.word	0x08002591
 800257c:	0800258b 	.word	0x0800258b
 8002580:	08002597 	.word	0x08002597
 8002584:	2301      	movs	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
 8002588:	e150      	b.n	800282c <UART_SetConfig+0x348>
 800258a:	2302      	movs	r3, #2
 800258c:	77fb      	strb	r3, [r7, #31]
 800258e:	e14d      	b.n	800282c <UART_SetConfig+0x348>
 8002590:	2304      	movs	r3, #4
 8002592:	77fb      	strb	r3, [r7, #31]
 8002594:	e14a      	b.n	800282c <UART_SetConfig+0x348>
 8002596:	2308      	movs	r3, #8
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e147      	b.n	800282c <UART_SetConfig+0x348>
 800259c:	2310      	movs	r3, #16
 800259e:	77fb      	strb	r3, [r7, #31]
 80025a0:	e144      	b.n	800282c <UART_SetConfig+0x348>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a83      	ldr	r2, [pc, #524]	@ (80027b4 <UART_SetConfig+0x2d0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d132      	bne.n	8002612 <UART_SetConfig+0x12e>
 80025ac:	4b80      	ldr	r3, [pc, #512]	@ (80027b0 <UART_SetConfig+0x2cc>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d828      	bhi.n	800260c <UART_SetConfig+0x128>
 80025ba:	a201      	add	r2, pc, #4	@ (adr r2, 80025c0 <UART_SetConfig+0xdc>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	080025f5 	.word	0x080025f5
 80025c4:	0800260d 	.word	0x0800260d
 80025c8:	0800260d 	.word	0x0800260d
 80025cc:	0800260d 	.word	0x0800260d
 80025d0:	08002601 	.word	0x08002601
 80025d4:	0800260d 	.word	0x0800260d
 80025d8:	0800260d 	.word	0x0800260d
 80025dc:	0800260d 	.word	0x0800260d
 80025e0:	080025fb 	.word	0x080025fb
 80025e4:	0800260d 	.word	0x0800260d
 80025e8:	0800260d 	.word	0x0800260d
 80025ec:	0800260d 	.word	0x0800260d
 80025f0:	08002607 	.word	0x08002607
 80025f4:	2300      	movs	r3, #0
 80025f6:	77fb      	strb	r3, [r7, #31]
 80025f8:	e118      	b.n	800282c <UART_SetConfig+0x348>
 80025fa:	2302      	movs	r3, #2
 80025fc:	77fb      	strb	r3, [r7, #31]
 80025fe:	e115      	b.n	800282c <UART_SetConfig+0x348>
 8002600:	2304      	movs	r3, #4
 8002602:	77fb      	strb	r3, [r7, #31]
 8002604:	e112      	b.n	800282c <UART_SetConfig+0x348>
 8002606:	2308      	movs	r3, #8
 8002608:	77fb      	strb	r3, [r7, #31]
 800260a:	e10f      	b.n	800282c <UART_SetConfig+0x348>
 800260c:	2310      	movs	r3, #16
 800260e:	77fb      	strb	r3, [r7, #31]
 8002610:	e10c      	b.n	800282c <UART_SetConfig+0x348>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a68      	ldr	r2, [pc, #416]	@ (80027b8 <UART_SetConfig+0x2d4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d120      	bne.n	800265e <UART_SetConfig+0x17a>
 800261c:	4b64      	ldr	r3, [pc, #400]	@ (80027b0 <UART_SetConfig+0x2cc>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002626:	2b30      	cmp	r3, #48	@ 0x30
 8002628:	d013      	beq.n	8002652 <UART_SetConfig+0x16e>
 800262a:	2b30      	cmp	r3, #48	@ 0x30
 800262c:	d814      	bhi.n	8002658 <UART_SetConfig+0x174>
 800262e:	2b20      	cmp	r3, #32
 8002630:	d009      	beq.n	8002646 <UART_SetConfig+0x162>
 8002632:	2b20      	cmp	r3, #32
 8002634:	d810      	bhi.n	8002658 <UART_SetConfig+0x174>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <UART_SetConfig+0x15c>
 800263a:	2b10      	cmp	r3, #16
 800263c:	d006      	beq.n	800264c <UART_SetConfig+0x168>
 800263e:	e00b      	b.n	8002658 <UART_SetConfig+0x174>
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
 8002644:	e0f2      	b.n	800282c <UART_SetConfig+0x348>
 8002646:	2302      	movs	r3, #2
 8002648:	77fb      	strb	r3, [r7, #31]
 800264a:	e0ef      	b.n	800282c <UART_SetConfig+0x348>
 800264c:	2304      	movs	r3, #4
 800264e:	77fb      	strb	r3, [r7, #31]
 8002650:	e0ec      	b.n	800282c <UART_SetConfig+0x348>
 8002652:	2308      	movs	r3, #8
 8002654:	77fb      	strb	r3, [r7, #31]
 8002656:	e0e9      	b.n	800282c <UART_SetConfig+0x348>
 8002658:	2310      	movs	r3, #16
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e0e6      	b.n	800282c <UART_SetConfig+0x348>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a56      	ldr	r2, [pc, #344]	@ (80027bc <UART_SetConfig+0x2d8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d120      	bne.n	80026aa <UART_SetConfig+0x1c6>
 8002668:	4b51      	ldr	r3, [pc, #324]	@ (80027b0 <UART_SetConfig+0x2cc>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002672:	2bc0      	cmp	r3, #192	@ 0xc0
 8002674:	d013      	beq.n	800269e <UART_SetConfig+0x1ba>
 8002676:	2bc0      	cmp	r3, #192	@ 0xc0
 8002678:	d814      	bhi.n	80026a4 <UART_SetConfig+0x1c0>
 800267a:	2b80      	cmp	r3, #128	@ 0x80
 800267c:	d009      	beq.n	8002692 <UART_SetConfig+0x1ae>
 800267e:	2b80      	cmp	r3, #128	@ 0x80
 8002680:	d810      	bhi.n	80026a4 <UART_SetConfig+0x1c0>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <UART_SetConfig+0x1a8>
 8002686:	2b40      	cmp	r3, #64	@ 0x40
 8002688:	d006      	beq.n	8002698 <UART_SetConfig+0x1b4>
 800268a:	e00b      	b.n	80026a4 <UART_SetConfig+0x1c0>
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]
 8002690:	e0cc      	b.n	800282c <UART_SetConfig+0x348>
 8002692:	2302      	movs	r3, #2
 8002694:	77fb      	strb	r3, [r7, #31]
 8002696:	e0c9      	b.n	800282c <UART_SetConfig+0x348>
 8002698:	2304      	movs	r3, #4
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	e0c6      	b.n	800282c <UART_SetConfig+0x348>
 800269e:	2308      	movs	r3, #8
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e0c3      	b.n	800282c <UART_SetConfig+0x348>
 80026a4:	2310      	movs	r3, #16
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e0c0      	b.n	800282c <UART_SetConfig+0x348>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a44      	ldr	r2, [pc, #272]	@ (80027c0 <UART_SetConfig+0x2dc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d125      	bne.n	8002700 <UART_SetConfig+0x21c>
 80026b4:	4b3e      	ldr	r3, [pc, #248]	@ (80027b0 <UART_SetConfig+0x2cc>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026c2:	d017      	beq.n	80026f4 <UART_SetConfig+0x210>
 80026c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026c8:	d817      	bhi.n	80026fa <UART_SetConfig+0x216>
 80026ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ce:	d00b      	beq.n	80026e8 <UART_SetConfig+0x204>
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d4:	d811      	bhi.n	80026fa <UART_SetConfig+0x216>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <UART_SetConfig+0x1fe>
 80026da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026de:	d006      	beq.n	80026ee <UART_SetConfig+0x20a>
 80026e0:	e00b      	b.n	80026fa <UART_SetConfig+0x216>
 80026e2:	2300      	movs	r3, #0
 80026e4:	77fb      	strb	r3, [r7, #31]
 80026e6:	e0a1      	b.n	800282c <UART_SetConfig+0x348>
 80026e8:	2302      	movs	r3, #2
 80026ea:	77fb      	strb	r3, [r7, #31]
 80026ec:	e09e      	b.n	800282c <UART_SetConfig+0x348>
 80026ee:	2304      	movs	r3, #4
 80026f0:	77fb      	strb	r3, [r7, #31]
 80026f2:	e09b      	b.n	800282c <UART_SetConfig+0x348>
 80026f4:	2308      	movs	r3, #8
 80026f6:	77fb      	strb	r3, [r7, #31]
 80026f8:	e098      	b.n	800282c <UART_SetConfig+0x348>
 80026fa:	2310      	movs	r3, #16
 80026fc:	77fb      	strb	r3, [r7, #31]
 80026fe:	e095      	b.n	800282c <UART_SetConfig+0x348>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2f      	ldr	r2, [pc, #188]	@ (80027c4 <UART_SetConfig+0x2e0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d125      	bne.n	8002756 <UART_SetConfig+0x272>
 800270a:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <UART_SetConfig+0x2cc>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002710:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002718:	d017      	beq.n	800274a <UART_SetConfig+0x266>
 800271a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800271e:	d817      	bhi.n	8002750 <UART_SetConfig+0x26c>
 8002720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002724:	d00b      	beq.n	800273e <UART_SetConfig+0x25a>
 8002726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800272a:	d811      	bhi.n	8002750 <UART_SetConfig+0x26c>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <UART_SetConfig+0x254>
 8002730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002734:	d006      	beq.n	8002744 <UART_SetConfig+0x260>
 8002736:	e00b      	b.n	8002750 <UART_SetConfig+0x26c>
 8002738:	2301      	movs	r3, #1
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	e076      	b.n	800282c <UART_SetConfig+0x348>
 800273e:	2302      	movs	r3, #2
 8002740:	77fb      	strb	r3, [r7, #31]
 8002742:	e073      	b.n	800282c <UART_SetConfig+0x348>
 8002744:	2304      	movs	r3, #4
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	e070      	b.n	800282c <UART_SetConfig+0x348>
 800274a:	2308      	movs	r3, #8
 800274c:	77fb      	strb	r3, [r7, #31]
 800274e:	e06d      	b.n	800282c <UART_SetConfig+0x348>
 8002750:	2310      	movs	r3, #16
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e06a      	b.n	800282c <UART_SetConfig+0x348>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	@ (80027c8 <UART_SetConfig+0x2e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d138      	bne.n	80027d2 <UART_SetConfig+0x2ee>
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <UART_SetConfig+0x2cc>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002766:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800276a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800276e:	d017      	beq.n	80027a0 <UART_SetConfig+0x2bc>
 8002770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002774:	d82a      	bhi.n	80027cc <UART_SetConfig+0x2e8>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277a:	d00b      	beq.n	8002794 <UART_SetConfig+0x2b0>
 800277c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002780:	d824      	bhi.n	80027cc <UART_SetConfig+0x2e8>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <UART_SetConfig+0x2aa>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278a:	d006      	beq.n	800279a <UART_SetConfig+0x2b6>
 800278c:	e01e      	b.n	80027cc <UART_SetConfig+0x2e8>
 800278e:	2300      	movs	r3, #0
 8002790:	77fb      	strb	r3, [r7, #31]
 8002792:	e04b      	b.n	800282c <UART_SetConfig+0x348>
 8002794:	2302      	movs	r3, #2
 8002796:	77fb      	strb	r3, [r7, #31]
 8002798:	e048      	b.n	800282c <UART_SetConfig+0x348>
 800279a:	2304      	movs	r3, #4
 800279c:	77fb      	strb	r3, [r7, #31]
 800279e:	e045      	b.n	800282c <UART_SetConfig+0x348>
 80027a0:	2308      	movs	r3, #8
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e042      	b.n	800282c <UART_SetConfig+0x348>
 80027a6:	bf00      	nop
 80027a8:	efff69f3 	.word	0xefff69f3
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40004400 	.word	0x40004400
 80027b8:	40004800 	.word	0x40004800
 80027bc:	40004c00 	.word	0x40004c00
 80027c0:	40005000 	.word	0x40005000
 80027c4:	40011400 	.word	0x40011400
 80027c8:	40007800 	.word	0x40007800
 80027cc:	2310      	movs	r3, #16
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e02c      	b.n	800282c <UART_SetConfig+0x348>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a72      	ldr	r2, [pc, #456]	@ (80029a0 <UART_SetConfig+0x4bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d125      	bne.n	8002828 <UART_SetConfig+0x344>
 80027dc:	4b71      	ldr	r3, [pc, #452]	@ (80029a4 <UART_SetConfig+0x4c0>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027ea:	d017      	beq.n	800281c <UART_SetConfig+0x338>
 80027ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027f0:	d817      	bhi.n	8002822 <UART_SetConfig+0x33e>
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027f6:	d00b      	beq.n	8002810 <UART_SetConfig+0x32c>
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027fc:	d811      	bhi.n	8002822 <UART_SetConfig+0x33e>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <UART_SetConfig+0x326>
 8002802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002806:	d006      	beq.n	8002816 <UART_SetConfig+0x332>
 8002808:	e00b      	b.n	8002822 <UART_SetConfig+0x33e>
 800280a:	2300      	movs	r3, #0
 800280c:	77fb      	strb	r3, [r7, #31]
 800280e:	e00d      	b.n	800282c <UART_SetConfig+0x348>
 8002810:	2302      	movs	r3, #2
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	e00a      	b.n	800282c <UART_SetConfig+0x348>
 8002816:	2304      	movs	r3, #4
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e007      	b.n	800282c <UART_SetConfig+0x348>
 800281c:	2308      	movs	r3, #8
 800281e:	77fb      	strb	r3, [r7, #31]
 8002820:	e004      	b.n	800282c <UART_SetConfig+0x348>
 8002822:	2310      	movs	r3, #16
 8002824:	77fb      	strb	r3, [r7, #31]
 8002826:	e001      	b.n	800282c <UART_SetConfig+0x348>
 8002828:	2310      	movs	r3, #16
 800282a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002834:	d15b      	bne.n	80028ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d828      	bhi.n	800288e <UART_SetConfig+0x3aa>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <UART_SetConfig+0x360>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002869 	.word	0x08002869
 8002848:	08002871 	.word	0x08002871
 800284c:	08002879 	.word	0x08002879
 8002850:	0800288f 	.word	0x0800288f
 8002854:	0800287f 	.word	0x0800287f
 8002858:	0800288f 	.word	0x0800288f
 800285c:	0800288f 	.word	0x0800288f
 8002860:	0800288f 	.word	0x0800288f
 8002864:	08002887 	.word	0x08002887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002868:	f7ff f9f2 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 800286c:	61b8      	str	r0, [r7, #24]
        break;
 800286e:	e013      	b.n	8002898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002870:	f7ff fa02 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002874:	61b8      	str	r0, [r7, #24]
        break;
 8002876:	e00f      	b.n	8002898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002878:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <UART_SetConfig+0x4c4>)
 800287a:	61bb      	str	r3, [r7, #24]
        break;
 800287c:	e00c      	b.n	8002898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800287e:	f7ff f8d5 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002882:	61b8      	str	r0, [r7, #24]
        break;
 8002884:	e008      	b.n	8002898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800288a:	61bb      	str	r3, [r7, #24]
        break;
 800288c:	e004      	b.n	8002898 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	77bb      	strb	r3, [r7, #30]
        break;
 8002896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d074      	beq.n	8002988 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	441a      	add	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d916      	bls.n	80028e8 <UART_SetConfig+0x404>
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c0:	d212      	bcs.n	80028e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f023 030f 	bic.w	r3, r3, #15
 80028ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	4313      	orrs	r3, r2
 80028dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	89fa      	ldrh	r2, [r7, #14]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	e04f      	b.n	8002988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	77bb      	strb	r3, [r7, #30]
 80028ec:	e04c      	b.n	8002988 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d828      	bhi.n	8002946 <UART_SetConfig+0x462>
 80028f4:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <UART_SetConfig+0x418>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	08002921 	.word	0x08002921
 8002900:	08002929 	.word	0x08002929
 8002904:	08002931 	.word	0x08002931
 8002908:	08002947 	.word	0x08002947
 800290c:	08002937 	.word	0x08002937
 8002910:	08002947 	.word	0x08002947
 8002914:	08002947 	.word	0x08002947
 8002918:	08002947 	.word	0x08002947
 800291c:	0800293f 	.word	0x0800293f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002920:	f7ff f996 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002924:	61b8      	str	r0, [r7, #24]
        break;
 8002926:	e013      	b.n	8002950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002928:	f7ff f9a6 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 800292c:	61b8      	str	r0, [r7, #24]
        break;
 800292e:	e00f      	b.n	8002950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <UART_SetConfig+0x4c4>)
 8002932:	61bb      	str	r3, [r7, #24]
        break;
 8002934:	e00c      	b.n	8002950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002936:	f7ff f879 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 800293a:	61b8      	str	r0, [r7, #24]
        break;
 800293c:	e008      	b.n	8002950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800293e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002942:	61bb      	str	r3, [r7, #24]
        break;
 8002944:	e004      	b.n	8002950 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	77bb      	strb	r3, [r7, #30]
        break;
 800294e:	bf00      	nop
    }

    if (pclk != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	085a      	lsrs	r2, r3, #1
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	441a      	add	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b0f      	cmp	r3, #15
 800296e:	d909      	bls.n	8002984 <UART_SetConfig+0x4a0>
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002976:	d205      	bcs.n	8002984 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	e001      	b.n	8002988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002994:	7fbb      	ldrb	r3, [r7, #30]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40007c00 	.word	0x40007c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400

080029ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01a      	beq.n	8002ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aaa:	d10a      	bne.n	8002ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	@ 0x30
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b00:	f7fe f88a 	bl	8000c18 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d12e      	bne.n	8002b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f83b 	bl	8002b9e <UART_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d021      	beq.n	8002b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	69b9      	ldr	r1, [r7, #24]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	617b      	str	r3, [r7, #20]
   return(result);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e6      	bne.n	8002b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e011      	b.n	8002b96 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3728      	adds	r7, #40	@ 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bae:	e04f      	b.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d04b      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7fe f82e 	bl	8000c18 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e04e      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d037      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b80      	cmp	r3, #128	@ 0x80
 8002be4:	d034      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b40      	cmp	r3, #64	@ 0x40
 8002bea:	d031      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d110      	bne.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2208      	movs	r2, #8
 8002c00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f838 	bl	8002c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e029      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c2a:	d111      	bne.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f81e 	bl	8002c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e00f      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d0a0      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b095      	sub	sp, #84	@ 0x54
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e6      	bne.n	8002c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e5      	bne.n	8002cb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d118      	bne.n	8002d20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6979      	ldr	r1, [r7, #20]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e6      	bne.n	8002cee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d34:	bf00      	nop
 8002d36:	3754      	adds	r7, #84	@ 0x54
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <MX_X_CUBE_AI_Init>:
#include "app_x-cube-ai.h"

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
    /* USER CODE END 6 */
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <std>:
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	4604      	mov	r4, r0
 8002d62:	e9c0 3300 	strd	r3, r3, [r0]
 8002d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d6a:	6083      	str	r3, [r0, #8]
 8002d6c:	8181      	strh	r1, [r0, #12]
 8002d6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d70:	81c2      	strh	r2, [r0, #14]
 8002d72:	6183      	str	r3, [r0, #24]
 8002d74:	4619      	mov	r1, r3
 8002d76:	2208      	movs	r2, #8
 8002d78:	305c      	adds	r0, #92	@ 0x5c
 8002d7a:	f000 f9e7 	bl	800314c <memset>
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <std+0x58>)
 8002d80:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d82:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <std+0x5c>)
 8002d84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d86:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <std+0x60>)
 8002d88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <std+0x64>)
 8002d8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <std+0x68>)
 8002d90:	6224      	str	r4, [r4, #32]
 8002d92:	429c      	cmp	r4, r3
 8002d94:	d006      	beq.n	8002da4 <std+0x48>
 8002d96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d9a:	4294      	cmp	r4, r2
 8002d9c:	d002      	beq.n	8002da4 <std+0x48>
 8002d9e:	33d0      	adds	r3, #208	@ 0xd0
 8002da0:	429c      	cmp	r4, r3
 8002da2:	d105      	bne.n	8002db0 <std+0x54>
 8002da4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dac:	f000 ba46 	b.w	800323c <__retarget_lock_init_recursive>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop
 8002db4:	08002f9d 	.word	0x08002f9d
 8002db8:	08002fbf 	.word	0x08002fbf
 8002dbc:	08002ff7 	.word	0x08002ff7
 8002dc0:	0800301b 	.word	0x0800301b
 8002dc4:	20000114 	.word	0x20000114

08002dc8 <stdio_exit_handler>:
 8002dc8:	4a02      	ldr	r2, [pc, #8]	@ (8002dd4 <stdio_exit_handler+0xc>)
 8002dca:	4903      	ldr	r1, [pc, #12]	@ (8002dd8 <stdio_exit_handler+0x10>)
 8002dcc:	4803      	ldr	r0, [pc, #12]	@ (8002ddc <stdio_exit_handler+0x14>)
 8002dce:	f000 b869 	b.w	8002ea4 <_fwalk_sglue>
 8002dd2:	bf00      	nop
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	0800353d 	.word	0x0800353d
 8002ddc:	2000001c 	.word	0x2000001c

08002de0 <cleanup_stdio>:
 8002de0:	6841      	ldr	r1, [r0, #4]
 8002de2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <cleanup_stdio+0x34>)
 8002de4:	4299      	cmp	r1, r3
 8002de6:	b510      	push	{r4, lr}
 8002de8:	4604      	mov	r4, r0
 8002dea:	d001      	beq.n	8002df0 <cleanup_stdio+0x10>
 8002dec:	f000 fba6 	bl	800353c <_fflush_r>
 8002df0:	68a1      	ldr	r1, [r4, #8]
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <cleanup_stdio+0x38>)
 8002df4:	4299      	cmp	r1, r3
 8002df6:	d002      	beq.n	8002dfe <cleanup_stdio+0x1e>
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f000 fb9f 	bl	800353c <_fflush_r>
 8002dfe:	68e1      	ldr	r1, [r4, #12]
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <cleanup_stdio+0x3c>)
 8002e02:	4299      	cmp	r1, r3
 8002e04:	d004      	beq.n	8002e10 <cleanup_stdio+0x30>
 8002e06:	4620      	mov	r0, r4
 8002e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e0c:	f000 bb96 	b.w	800353c <_fflush_r>
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	20000114 	.word	0x20000114
 8002e18:	2000017c 	.word	0x2000017c
 8002e1c:	200001e4 	.word	0x200001e4

08002e20 <global_stdio_init.part.0>:
 8002e20:	b510      	push	{r4, lr}
 8002e22:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <global_stdio_init.part.0+0x30>)
 8002e24:	4c0b      	ldr	r4, [pc, #44]	@ (8002e54 <global_stdio_init.part.0+0x34>)
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <global_stdio_init.part.0+0x38>)
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2104      	movs	r1, #4
 8002e30:	f7ff ff94 	bl	8002d5c <std>
 8002e34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e38:	2201      	movs	r2, #1
 8002e3a:	2109      	movs	r1, #9
 8002e3c:	f7ff ff8e 	bl	8002d5c <std>
 8002e40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e44:	2202      	movs	r2, #2
 8002e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e4a:	2112      	movs	r1, #18
 8002e4c:	f7ff bf86 	b.w	8002d5c <std>
 8002e50:	2000024c 	.word	0x2000024c
 8002e54:	20000114 	.word	0x20000114
 8002e58:	08002dc9 	.word	0x08002dc9

08002e5c <__sfp_lock_acquire>:
 8002e5c:	4801      	ldr	r0, [pc, #4]	@ (8002e64 <__sfp_lock_acquire+0x8>)
 8002e5e:	f000 b9ee 	b.w	800323e <__retarget_lock_acquire_recursive>
 8002e62:	bf00      	nop
 8002e64:	20000255 	.word	0x20000255

08002e68 <__sfp_lock_release>:
 8002e68:	4801      	ldr	r0, [pc, #4]	@ (8002e70 <__sfp_lock_release+0x8>)
 8002e6a:	f000 b9e9 	b.w	8003240 <__retarget_lock_release_recursive>
 8002e6e:	bf00      	nop
 8002e70:	20000255 	.word	0x20000255

08002e74 <__sinit>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	f7ff fff0 	bl	8002e5c <__sfp_lock_acquire>
 8002e7c:	6a23      	ldr	r3, [r4, #32]
 8002e7e:	b11b      	cbz	r3, 8002e88 <__sinit+0x14>
 8002e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e84:	f7ff bff0 	b.w	8002e68 <__sfp_lock_release>
 8002e88:	4b04      	ldr	r3, [pc, #16]	@ (8002e9c <__sinit+0x28>)
 8002e8a:	6223      	str	r3, [r4, #32]
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <__sinit+0x2c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f5      	bne.n	8002e80 <__sinit+0xc>
 8002e94:	f7ff ffc4 	bl	8002e20 <global_stdio_init.part.0>
 8002e98:	e7f2      	b.n	8002e80 <__sinit+0xc>
 8002e9a:	bf00      	nop
 8002e9c:	08002de1 	.word	0x08002de1
 8002ea0:	2000024c 	.word	0x2000024c

08002ea4 <_fwalk_sglue>:
 8002ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	4688      	mov	r8, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	2600      	movs	r6, #0
 8002eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8002eb8:	d505      	bpl.n	8002ec6 <_fwalk_sglue+0x22>
 8002eba:	6824      	ldr	r4, [r4, #0]
 8002ebc:	2c00      	cmp	r4, #0
 8002ebe:	d1f7      	bne.n	8002eb0 <_fwalk_sglue+0xc>
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ec6:	89ab      	ldrh	r3, [r5, #12]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d907      	bls.n	8002edc <_fwalk_sglue+0x38>
 8002ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	d003      	beq.n	8002edc <_fwalk_sglue+0x38>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	47c0      	blx	r8
 8002eda:	4306      	orrs	r6, r0
 8002edc:	3568      	adds	r5, #104	@ 0x68
 8002ede:	e7e9      	b.n	8002eb4 <_fwalk_sglue+0x10>

08002ee0 <_puts_r>:
 8002ee0:	6a03      	ldr	r3, [r0, #32]
 8002ee2:	b570      	push	{r4, r5, r6, lr}
 8002ee4:	6884      	ldr	r4, [r0, #8]
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	460e      	mov	r6, r1
 8002eea:	b90b      	cbnz	r3, 8002ef0 <_puts_r+0x10>
 8002eec:	f7ff ffc2 	bl	8002e74 <__sinit>
 8002ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ef2:	07db      	lsls	r3, r3, #31
 8002ef4:	d405      	bmi.n	8002f02 <_puts_r+0x22>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	0598      	lsls	r0, r3, #22
 8002efa:	d402      	bmi.n	8002f02 <_puts_r+0x22>
 8002efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002efe:	f000 f99e 	bl	800323e <__retarget_lock_acquire_recursive>
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	0719      	lsls	r1, r3, #28
 8002f06:	d502      	bpl.n	8002f0e <_puts_r+0x2e>
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d135      	bne.n	8002f7a <_puts_r+0x9a>
 8002f0e:	4621      	mov	r1, r4
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 f8c5 	bl	80030a0 <__swsetup_r>
 8002f16:	b380      	cbz	r0, 8002f7a <_puts_r+0x9a>
 8002f18:	f04f 35ff 	mov.w	r5, #4294967295
 8002f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f1e:	07da      	lsls	r2, r3, #31
 8002f20:	d405      	bmi.n	8002f2e <_puts_r+0x4e>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	059b      	lsls	r3, r3, #22
 8002f26:	d402      	bmi.n	8002f2e <_puts_r+0x4e>
 8002f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f2a:	f000 f989 	bl	8003240 <__retarget_lock_release_recursive>
 8002f2e:	4628      	mov	r0, r5
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da04      	bge.n	8002f40 <_puts_r+0x60>
 8002f36:	69a2      	ldr	r2, [r4, #24]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	dc17      	bgt.n	8002f6c <_puts_r+0x8c>
 8002f3c:	290a      	cmp	r1, #10
 8002f3e:	d015      	beq.n	8002f6c <_puts_r+0x8c>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	6022      	str	r2, [r4, #0]
 8002f46:	7019      	strb	r1, [r3, #0]
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60a3      	str	r3, [r4, #8]
 8002f52:	2900      	cmp	r1, #0
 8002f54:	d1ed      	bne.n	8002f32 <_puts_r+0x52>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da11      	bge.n	8002f7e <_puts_r+0x9e>
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f000 f85f 	bl	8003022 <__swbuf_r>
 8002f64:	3001      	adds	r0, #1
 8002f66:	d0d7      	beq.n	8002f18 <_puts_r+0x38>
 8002f68:	250a      	movs	r5, #10
 8002f6a:	e7d7      	b.n	8002f1c <_puts_r+0x3c>
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 f857 	bl	8003022 <__swbuf_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d1e7      	bne.n	8002f48 <_puts_r+0x68>
 8002f78:	e7ce      	b.n	8002f18 <_puts_r+0x38>
 8002f7a:	3e01      	subs	r6, #1
 8002f7c:	e7e4      	b.n	8002f48 <_puts_r+0x68>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	6022      	str	r2, [r4, #0]
 8002f84:	220a      	movs	r2, #10
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e7ee      	b.n	8002f68 <_puts_r+0x88>
	...

08002f8c <puts>:
 8002f8c:	4b02      	ldr	r3, [pc, #8]	@ (8002f98 <puts+0xc>)
 8002f8e:	4601      	mov	r1, r0
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	f7ff bfa5 	b.w	8002ee0 <_puts_r>
 8002f96:	bf00      	nop
 8002f98:	20000018 	.word	0x20000018

08002f9c <__sread>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa4:	f000 f8fc 	bl	80031a0 <_read_r>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	bfab      	itete	ge
 8002fac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fae:	89a3      	ldrhlt	r3, [r4, #12]
 8002fb0:	181b      	addge	r3, r3, r0
 8002fb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fb6:	bfac      	ite	ge
 8002fb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002fba:	81a3      	strhlt	r3, [r4, #12]
 8002fbc:	bd10      	pop	{r4, pc}

08002fbe <__swrite>:
 8002fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc2:	461f      	mov	r7, r3
 8002fc4:	898b      	ldrh	r3, [r1, #12]
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	4605      	mov	r5, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	4616      	mov	r6, r2
 8002fce:	d505      	bpl.n	8002fdc <__swrite+0x1e>
 8002fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f000 f8d0 	bl	800317c <_lseek_r>
 8002fdc:	89a3      	ldrh	r3, [r4, #12]
 8002fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe6:	81a3      	strh	r3, [r4, #12]
 8002fe8:	4632      	mov	r2, r6
 8002fea:	463b      	mov	r3, r7
 8002fec:	4628      	mov	r0, r5
 8002fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff2:	f000 b8e7 	b.w	80031c4 <_write_r>

08002ff6 <__sseek>:
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffe:	f000 f8bd 	bl	800317c <_lseek_r>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	bf15      	itete	ne
 8003008:	6560      	strne	r0, [r4, #84]	@ 0x54
 800300a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800300e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003012:	81a3      	strheq	r3, [r4, #12]
 8003014:	bf18      	it	ne
 8003016:	81a3      	strhne	r3, [r4, #12]
 8003018:	bd10      	pop	{r4, pc}

0800301a <__sclose>:
 800301a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301e:	f000 b89d 	b.w	800315c <_close_r>

08003022 <__swbuf_r>:
 8003022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003024:	460e      	mov	r6, r1
 8003026:	4614      	mov	r4, r2
 8003028:	4605      	mov	r5, r0
 800302a:	b118      	cbz	r0, 8003034 <__swbuf_r+0x12>
 800302c:	6a03      	ldr	r3, [r0, #32]
 800302e:	b90b      	cbnz	r3, 8003034 <__swbuf_r+0x12>
 8003030:	f7ff ff20 	bl	8002e74 <__sinit>
 8003034:	69a3      	ldr	r3, [r4, #24]
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	071a      	lsls	r2, r3, #28
 800303c:	d501      	bpl.n	8003042 <__swbuf_r+0x20>
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	b943      	cbnz	r3, 8003054 <__swbuf_r+0x32>
 8003042:	4621      	mov	r1, r4
 8003044:	4628      	mov	r0, r5
 8003046:	f000 f82b 	bl	80030a0 <__swsetup_r>
 800304a:	b118      	cbz	r0, 8003054 <__swbuf_r+0x32>
 800304c:	f04f 37ff 	mov.w	r7, #4294967295
 8003050:	4638      	mov	r0, r7
 8003052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	6922      	ldr	r2, [r4, #16]
 8003058:	1a98      	subs	r0, r3, r2
 800305a:	6963      	ldr	r3, [r4, #20]
 800305c:	b2f6      	uxtb	r6, r6
 800305e:	4283      	cmp	r3, r0
 8003060:	4637      	mov	r7, r6
 8003062:	dc05      	bgt.n	8003070 <__swbuf_r+0x4e>
 8003064:	4621      	mov	r1, r4
 8003066:	4628      	mov	r0, r5
 8003068:	f000 fa68 	bl	800353c <_fflush_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1ed      	bne.n	800304c <__swbuf_r+0x2a>
 8003070:	68a3      	ldr	r3, [r4, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	60a3      	str	r3, [r4, #8]
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	6022      	str	r2, [r4, #0]
 800307c:	701e      	strb	r6, [r3, #0]
 800307e:	6962      	ldr	r2, [r4, #20]
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	429a      	cmp	r2, r3
 8003084:	d004      	beq.n	8003090 <__swbuf_r+0x6e>
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	07db      	lsls	r3, r3, #31
 800308a:	d5e1      	bpl.n	8003050 <__swbuf_r+0x2e>
 800308c:	2e0a      	cmp	r6, #10
 800308e:	d1df      	bne.n	8003050 <__swbuf_r+0x2e>
 8003090:	4621      	mov	r1, r4
 8003092:	4628      	mov	r0, r5
 8003094:	f000 fa52 	bl	800353c <_fflush_r>
 8003098:	2800      	cmp	r0, #0
 800309a:	d0d9      	beq.n	8003050 <__swbuf_r+0x2e>
 800309c:	e7d6      	b.n	800304c <__swbuf_r+0x2a>
	...

080030a0 <__swsetup_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <__swsetup_r+0xa8>)
 80030a4:	4605      	mov	r5, r0
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	460c      	mov	r4, r1
 80030aa:	b118      	cbz	r0, 80030b4 <__swsetup_r+0x14>
 80030ac:	6a03      	ldr	r3, [r0, #32]
 80030ae:	b90b      	cbnz	r3, 80030b4 <__swsetup_r+0x14>
 80030b0:	f7ff fee0 	bl	8002e74 <__sinit>
 80030b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b8:	0719      	lsls	r1, r3, #28
 80030ba:	d422      	bmi.n	8003102 <__swsetup_r+0x62>
 80030bc:	06da      	lsls	r2, r3, #27
 80030be:	d407      	bmi.n	80030d0 <__swsetup_r+0x30>
 80030c0:	2209      	movs	r2, #9
 80030c2:	602a      	str	r2, [r5, #0]
 80030c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c8:	81a3      	strh	r3, [r4, #12]
 80030ca:	f04f 30ff 	mov.w	r0, #4294967295
 80030ce:	e033      	b.n	8003138 <__swsetup_r+0x98>
 80030d0:	0758      	lsls	r0, r3, #29
 80030d2:	d512      	bpl.n	80030fa <__swsetup_r+0x5a>
 80030d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030d6:	b141      	cbz	r1, 80030ea <__swsetup_r+0x4a>
 80030d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030dc:	4299      	cmp	r1, r3
 80030de:	d002      	beq.n	80030e6 <__swsetup_r+0x46>
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 f8af 	bl	8003244 <_free_r>
 80030e6:	2300      	movs	r3, #0
 80030e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80030ea:	89a3      	ldrh	r3, [r4, #12]
 80030ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80030f0:	81a3      	strh	r3, [r4, #12]
 80030f2:	2300      	movs	r3, #0
 80030f4:	6063      	str	r3, [r4, #4]
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	6923      	ldr	r3, [r4, #16]
 8003104:	b94b      	cbnz	r3, 800311a <__swsetup_r+0x7a>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800310c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003110:	d003      	beq.n	800311a <__swsetup_r+0x7a>
 8003112:	4621      	mov	r1, r4
 8003114:	4628      	mov	r0, r5
 8003116:	f000 fa5f 	bl	80035d8 <__smakebuf_r>
 800311a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800311e:	f013 0201 	ands.w	r2, r3, #1
 8003122:	d00a      	beq.n	800313a <__swsetup_r+0x9a>
 8003124:	2200      	movs	r2, #0
 8003126:	60a2      	str	r2, [r4, #8]
 8003128:	6962      	ldr	r2, [r4, #20]
 800312a:	4252      	negs	r2, r2
 800312c:	61a2      	str	r2, [r4, #24]
 800312e:	6922      	ldr	r2, [r4, #16]
 8003130:	b942      	cbnz	r2, 8003144 <__swsetup_r+0xa4>
 8003132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003136:	d1c5      	bne.n	80030c4 <__swsetup_r+0x24>
 8003138:	bd38      	pop	{r3, r4, r5, pc}
 800313a:	0799      	lsls	r1, r3, #30
 800313c:	bf58      	it	pl
 800313e:	6962      	ldrpl	r2, [r4, #20]
 8003140:	60a2      	str	r2, [r4, #8]
 8003142:	e7f4      	b.n	800312e <__swsetup_r+0x8e>
 8003144:	2000      	movs	r0, #0
 8003146:	e7f7      	b.n	8003138 <__swsetup_r+0x98>
 8003148:	20000018 	.word	0x20000018

0800314c <memset>:
 800314c:	4402      	add	r2, r0
 800314e:	4603      	mov	r3, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <_close_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4d06      	ldr	r5, [pc, #24]	@ (8003178 <_close_r+0x1c>)
 8003160:	2300      	movs	r3, #0
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fd fa87 	bl	800067a <_close>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_close_r+0x1a>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_close_r+0x1a>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000250 	.word	0x20000250

0800317c <_lseek_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4d07      	ldr	r5, [pc, #28]	@ (800319c <_lseek_r+0x20>)
 8003180:	4604      	mov	r4, r0
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	2200      	movs	r2, #0
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fd fa81 	bl	8000692 <_lseek>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_lseek_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_lseek_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000250 	.word	0x20000250

080031a0 <_read_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4d07      	ldr	r5, [pc, #28]	@ (80031c0 <_read_r+0x20>)
 80031a4:	4604      	mov	r4, r0
 80031a6:	4608      	mov	r0, r1
 80031a8:	4611      	mov	r1, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	602a      	str	r2, [r5, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7fd fa56 	bl	8000660 <_read>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_read_r+0x1e>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_read_r+0x1e>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000250 	.word	0x20000250

080031c4 <_write_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4d07      	ldr	r5, [pc, #28]	@ (80031e4 <_write_r+0x20>)
 80031c8:	4604      	mov	r4, r0
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	602a      	str	r2, [r5, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fd fa24 	bl	8000620 <_write>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_write_r+0x1e>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_write_r+0x1e>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000250 	.word	0x20000250

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	@ (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000018 	.word	0x20000018

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4d0d      	ldr	r5, [pc, #52]	@ (800322c <__libc_init_array+0x38>)
 80031f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003230 <__libc_init_array+0x3c>)
 80031fa:	1b64      	subs	r4, r4, r5
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	2600      	movs	r6, #0
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	4d0b      	ldr	r5, [pc, #44]	@ (8003234 <__libc_init_array+0x40>)
 8003206:	4c0c      	ldr	r4, [pc, #48]	@ (8003238 <__libc_init_array+0x44>)
 8003208:	f000 fa54 	bl	80036b4 <_init>
 800320c:	1b64      	subs	r4, r4, r5
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	2600      	movs	r6, #0
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08003700 	.word	0x08003700
 8003230:	08003700 	.word	0x08003700
 8003234:	08003700 	.word	0x08003700
 8003238:	08003704 	.word	0x08003704

0800323c <__retarget_lock_init_recursive>:
 800323c:	4770      	bx	lr

0800323e <__retarget_lock_acquire_recursive>:
 800323e:	4770      	bx	lr

08003240 <__retarget_lock_release_recursive>:
 8003240:	4770      	bx	lr
	...

08003244 <_free_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	2900      	cmp	r1, #0
 800324a:	d041      	beq.n	80032d0 <_free_r+0x8c>
 800324c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003250:	1f0c      	subs	r4, r1, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfb8      	it	lt
 8003256:	18e4      	addlt	r4, r4, r3
 8003258:	f000 f8e0 	bl	800341c <__malloc_lock>
 800325c:	4a1d      	ldr	r2, [pc, #116]	@ (80032d4 <_free_r+0x90>)
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	b933      	cbnz	r3, 8003270 <_free_r+0x2c>
 8003262:	6063      	str	r3, [r4, #4]
 8003264:	6014      	str	r4, [r2, #0]
 8003266:	4628      	mov	r0, r5
 8003268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800326c:	f000 b8dc 	b.w	8003428 <__malloc_unlock>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d908      	bls.n	8003286 <_free_r+0x42>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	1821      	adds	r1, r4, r0
 8003278:	428b      	cmp	r3, r1
 800327a:	bf01      	itttt	eq
 800327c:	6819      	ldreq	r1, [r3, #0]
 800327e:	685b      	ldreq	r3, [r3, #4]
 8003280:	1809      	addeq	r1, r1, r0
 8003282:	6021      	streq	r1, [r4, #0]
 8003284:	e7ed      	b.n	8003262 <_free_r+0x1e>
 8003286:	461a      	mov	r2, r3
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	b10b      	cbz	r3, 8003290 <_free_r+0x4c>
 800328c:	42a3      	cmp	r3, r4
 800328e:	d9fa      	bls.n	8003286 <_free_r+0x42>
 8003290:	6811      	ldr	r1, [r2, #0]
 8003292:	1850      	adds	r0, r2, r1
 8003294:	42a0      	cmp	r0, r4
 8003296:	d10b      	bne.n	80032b0 <_free_r+0x6c>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	4401      	add	r1, r0
 800329c:	1850      	adds	r0, r2, r1
 800329e:	4283      	cmp	r3, r0
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	d1e0      	bne.n	8003266 <_free_r+0x22>
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	6053      	str	r3, [r2, #4]
 80032aa:	4408      	add	r0, r1
 80032ac:	6010      	str	r0, [r2, #0]
 80032ae:	e7da      	b.n	8003266 <_free_r+0x22>
 80032b0:	d902      	bls.n	80032b8 <_free_r+0x74>
 80032b2:	230c      	movs	r3, #12
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	e7d6      	b.n	8003266 <_free_r+0x22>
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	1821      	adds	r1, r4, r0
 80032bc:	428b      	cmp	r3, r1
 80032be:	bf04      	itt	eq
 80032c0:	6819      	ldreq	r1, [r3, #0]
 80032c2:	685b      	ldreq	r3, [r3, #4]
 80032c4:	6063      	str	r3, [r4, #4]
 80032c6:	bf04      	itt	eq
 80032c8:	1809      	addeq	r1, r1, r0
 80032ca:	6021      	streq	r1, [r4, #0]
 80032cc:	6054      	str	r4, [r2, #4]
 80032ce:	e7ca      	b.n	8003266 <_free_r+0x22>
 80032d0:	bd38      	pop	{r3, r4, r5, pc}
 80032d2:	bf00      	nop
 80032d4:	2000025c 	.word	0x2000025c

080032d8 <sbrk_aligned>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	4e0f      	ldr	r6, [pc, #60]	@ (8003318 <sbrk_aligned+0x40>)
 80032dc:	460c      	mov	r4, r1
 80032de:	6831      	ldr	r1, [r6, #0]
 80032e0:	4605      	mov	r5, r0
 80032e2:	b911      	cbnz	r1, 80032ea <sbrk_aligned+0x12>
 80032e4:	f000 f9d6 	bl	8003694 <_sbrk_r>
 80032e8:	6030      	str	r0, [r6, #0]
 80032ea:	4621      	mov	r1, r4
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 f9d1 	bl	8003694 <_sbrk_r>
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	d103      	bne.n	80032fe <sbrk_aligned+0x26>
 80032f6:	f04f 34ff 	mov.w	r4, #4294967295
 80032fa:	4620      	mov	r0, r4
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	1cc4      	adds	r4, r0, #3
 8003300:	f024 0403 	bic.w	r4, r4, #3
 8003304:	42a0      	cmp	r0, r4
 8003306:	d0f8      	beq.n	80032fa <sbrk_aligned+0x22>
 8003308:	1a21      	subs	r1, r4, r0
 800330a:	4628      	mov	r0, r5
 800330c:	f000 f9c2 	bl	8003694 <_sbrk_r>
 8003310:	3001      	adds	r0, #1
 8003312:	d1f2      	bne.n	80032fa <sbrk_aligned+0x22>
 8003314:	e7ef      	b.n	80032f6 <sbrk_aligned+0x1e>
 8003316:	bf00      	nop
 8003318:	20000258 	.word	0x20000258

0800331c <_malloc_r>:
 800331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003320:	1ccd      	adds	r5, r1, #3
 8003322:	f025 0503 	bic.w	r5, r5, #3
 8003326:	3508      	adds	r5, #8
 8003328:	2d0c      	cmp	r5, #12
 800332a:	bf38      	it	cc
 800332c:	250c      	movcc	r5, #12
 800332e:	2d00      	cmp	r5, #0
 8003330:	4606      	mov	r6, r0
 8003332:	db01      	blt.n	8003338 <_malloc_r+0x1c>
 8003334:	42a9      	cmp	r1, r5
 8003336:	d904      	bls.n	8003342 <_malloc_r+0x26>
 8003338:	230c      	movs	r3, #12
 800333a:	6033      	str	r3, [r6, #0]
 800333c:	2000      	movs	r0, #0
 800333e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003418 <_malloc_r+0xfc>
 8003346:	f000 f869 	bl	800341c <__malloc_lock>
 800334a:	f8d8 3000 	ldr.w	r3, [r8]
 800334e:	461c      	mov	r4, r3
 8003350:	bb44      	cbnz	r4, 80033a4 <_malloc_r+0x88>
 8003352:	4629      	mov	r1, r5
 8003354:	4630      	mov	r0, r6
 8003356:	f7ff ffbf 	bl	80032d8 <sbrk_aligned>
 800335a:	1c43      	adds	r3, r0, #1
 800335c:	4604      	mov	r4, r0
 800335e:	d158      	bne.n	8003412 <_malloc_r+0xf6>
 8003360:	f8d8 4000 	ldr.w	r4, [r8]
 8003364:	4627      	mov	r7, r4
 8003366:	2f00      	cmp	r7, #0
 8003368:	d143      	bne.n	80033f2 <_malloc_r+0xd6>
 800336a:	2c00      	cmp	r4, #0
 800336c:	d04b      	beq.n	8003406 <_malloc_r+0xea>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	4639      	mov	r1, r7
 8003372:	4630      	mov	r0, r6
 8003374:	eb04 0903 	add.w	r9, r4, r3
 8003378:	f000 f98c 	bl	8003694 <_sbrk_r>
 800337c:	4581      	cmp	r9, r0
 800337e:	d142      	bne.n	8003406 <_malloc_r+0xea>
 8003380:	6821      	ldr	r1, [r4, #0]
 8003382:	1a6d      	subs	r5, r5, r1
 8003384:	4629      	mov	r1, r5
 8003386:	4630      	mov	r0, r6
 8003388:	f7ff ffa6 	bl	80032d8 <sbrk_aligned>
 800338c:	3001      	adds	r0, #1
 800338e:	d03a      	beq.n	8003406 <_malloc_r+0xea>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	442b      	add	r3, r5
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	f8d8 3000 	ldr.w	r3, [r8]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	bb62      	cbnz	r2, 80033f8 <_malloc_r+0xdc>
 800339e:	f8c8 7000 	str.w	r7, [r8]
 80033a2:	e00f      	b.n	80033c4 <_malloc_r+0xa8>
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	1b52      	subs	r2, r2, r5
 80033a8:	d420      	bmi.n	80033ec <_malloc_r+0xd0>
 80033aa:	2a0b      	cmp	r2, #11
 80033ac:	d917      	bls.n	80033de <_malloc_r+0xc2>
 80033ae:	1961      	adds	r1, r4, r5
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	6025      	str	r5, [r4, #0]
 80033b4:	bf18      	it	ne
 80033b6:	6059      	strne	r1, [r3, #4]
 80033b8:	6863      	ldr	r3, [r4, #4]
 80033ba:	bf08      	it	eq
 80033bc:	f8c8 1000 	streq.w	r1, [r8]
 80033c0:	5162      	str	r2, [r4, r5]
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	4630      	mov	r0, r6
 80033c6:	f000 f82f 	bl	8003428 <__malloc_unlock>
 80033ca:	f104 000b 	add.w	r0, r4, #11
 80033ce:	1d23      	adds	r3, r4, #4
 80033d0:	f020 0007 	bic.w	r0, r0, #7
 80033d4:	1ac2      	subs	r2, r0, r3
 80033d6:	bf1c      	itt	ne
 80033d8:	1a1b      	subne	r3, r3, r0
 80033da:	50a3      	strne	r3, [r4, r2]
 80033dc:	e7af      	b.n	800333e <_malloc_r+0x22>
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	bf0c      	ite	eq
 80033e4:	f8c8 2000 	streq.w	r2, [r8]
 80033e8:	605a      	strne	r2, [r3, #4]
 80033ea:	e7eb      	b.n	80033c4 <_malloc_r+0xa8>
 80033ec:	4623      	mov	r3, r4
 80033ee:	6864      	ldr	r4, [r4, #4]
 80033f0:	e7ae      	b.n	8003350 <_malloc_r+0x34>
 80033f2:	463c      	mov	r4, r7
 80033f4:	687f      	ldr	r7, [r7, #4]
 80033f6:	e7b6      	b.n	8003366 <_malloc_r+0x4a>
 80033f8:	461a      	mov	r2, r3
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	d1fb      	bne.n	80033f8 <_malloc_r+0xdc>
 8003400:	2300      	movs	r3, #0
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e7de      	b.n	80033c4 <_malloc_r+0xa8>
 8003406:	230c      	movs	r3, #12
 8003408:	6033      	str	r3, [r6, #0]
 800340a:	4630      	mov	r0, r6
 800340c:	f000 f80c 	bl	8003428 <__malloc_unlock>
 8003410:	e794      	b.n	800333c <_malloc_r+0x20>
 8003412:	6005      	str	r5, [r0, #0]
 8003414:	e7d6      	b.n	80033c4 <_malloc_r+0xa8>
 8003416:	bf00      	nop
 8003418:	2000025c 	.word	0x2000025c

0800341c <__malloc_lock>:
 800341c:	4801      	ldr	r0, [pc, #4]	@ (8003424 <__malloc_lock+0x8>)
 800341e:	f7ff bf0e 	b.w	800323e <__retarget_lock_acquire_recursive>
 8003422:	bf00      	nop
 8003424:	20000254 	.word	0x20000254

08003428 <__malloc_unlock>:
 8003428:	4801      	ldr	r0, [pc, #4]	@ (8003430 <__malloc_unlock+0x8>)
 800342a:	f7ff bf09 	b.w	8003240 <__retarget_lock_release_recursive>
 800342e:	bf00      	nop
 8003430:	20000254 	.word	0x20000254

08003434 <__sflush_r>:
 8003434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343c:	0716      	lsls	r6, r2, #28
 800343e:	4605      	mov	r5, r0
 8003440:	460c      	mov	r4, r1
 8003442:	d454      	bmi.n	80034ee <__sflush_r+0xba>
 8003444:	684b      	ldr	r3, [r1, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	dc02      	bgt.n	8003450 <__sflush_r+0x1c>
 800344a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	dd48      	ble.n	80034e2 <__sflush_r+0xae>
 8003450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003452:	2e00      	cmp	r6, #0
 8003454:	d045      	beq.n	80034e2 <__sflush_r+0xae>
 8003456:	2300      	movs	r3, #0
 8003458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800345c:	682f      	ldr	r7, [r5, #0]
 800345e:	6a21      	ldr	r1, [r4, #32]
 8003460:	602b      	str	r3, [r5, #0]
 8003462:	d030      	beq.n	80034c6 <__sflush_r+0x92>
 8003464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	0759      	lsls	r1, r3, #29
 800346a:	d505      	bpl.n	8003478 <__sflush_r+0x44>
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	1ad2      	subs	r2, r2, r3
 8003470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003472:	b10b      	cbz	r3, 8003478 <__sflush_r+0x44>
 8003474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003476:	1ad2      	subs	r2, r2, r3
 8003478:	2300      	movs	r3, #0
 800347a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800347c:	6a21      	ldr	r1, [r4, #32]
 800347e:	4628      	mov	r0, r5
 8003480:	47b0      	blx	r6
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	d106      	bne.n	8003496 <__sflush_r+0x62>
 8003488:	6829      	ldr	r1, [r5, #0]
 800348a:	291d      	cmp	r1, #29
 800348c:	d82b      	bhi.n	80034e6 <__sflush_r+0xb2>
 800348e:	4a2a      	ldr	r2, [pc, #168]	@ (8003538 <__sflush_r+0x104>)
 8003490:	40ca      	lsrs	r2, r1
 8003492:	07d6      	lsls	r6, r2, #31
 8003494:	d527      	bpl.n	80034e6 <__sflush_r+0xb2>
 8003496:	2200      	movs	r2, #0
 8003498:	6062      	str	r2, [r4, #4]
 800349a:	04d9      	lsls	r1, r3, #19
 800349c:	6922      	ldr	r2, [r4, #16]
 800349e:	6022      	str	r2, [r4, #0]
 80034a0:	d504      	bpl.n	80034ac <__sflush_r+0x78>
 80034a2:	1c42      	adds	r2, r0, #1
 80034a4:	d101      	bne.n	80034aa <__sflush_r+0x76>
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	b903      	cbnz	r3, 80034ac <__sflush_r+0x78>
 80034aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80034ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034ae:	602f      	str	r7, [r5, #0]
 80034b0:	b1b9      	cbz	r1, 80034e2 <__sflush_r+0xae>
 80034b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034b6:	4299      	cmp	r1, r3
 80034b8:	d002      	beq.n	80034c0 <__sflush_r+0x8c>
 80034ba:	4628      	mov	r0, r5
 80034bc:	f7ff fec2 	bl	8003244 <_free_r>
 80034c0:	2300      	movs	r3, #0
 80034c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80034c4:	e00d      	b.n	80034e2 <__sflush_r+0xae>
 80034c6:	2301      	movs	r3, #1
 80034c8:	4628      	mov	r0, r5
 80034ca:	47b0      	blx	r6
 80034cc:	4602      	mov	r2, r0
 80034ce:	1c50      	adds	r0, r2, #1
 80034d0:	d1c9      	bne.n	8003466 <__sflush_r+0x32>
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0c6      	beq.n	8003466 <__sflush_r+0x32>
 80034d8:	2b1d      	cmp	r3, #29
 80034da:	d001      	beq.n	80034e0 <__sflush_r+0xac>
 80034dc:	2b16      	cmp	r3, #22
 80034de:	d11e      	bne.n	800351e <__sflush_r+0xea>
 80034e0:	602f      	str	r7, [r5, #0]
 80034e2:	2000      	movs	r0, #0
 80034e4:	e022      	b.n	800352c <__sflush_r+0xf8>
 80034e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	e01b      	b.n	8003526 <__sflush_r+0xf2>
 80034ee:	690f      	ldr	r7, [r1, #16]
 80034f0:	2f00      	cmp	r7, #0
 80034f2:	d0f6      	beq.n	80034e2 <__sflush_r+0xae>
 80034f4:	0793      	lsls	r3, r2, #30
 80034f6:	680e      	ldr	r6, [r1, #0]
 80034f8:	bf08      	it	eq
 80034fa:	694b      	ldreq	r3, [r1, #20]
 80034fc:	600f      	str	r7, [r1, #0]
 80034fe:	bf18      	it	ne
 8003500:	2300      	movne	r3, #0
 8003502:	eba6 0807 	sub.w	r8, r6, r7
 8003506:	608b      	str	r3, [r1, #8]
 8003508:	f1b8 0f00 	cmp.w	r8, #0
 800350c:	dde9      	ble.n	80034e2 <__sflush_r+0xae>
 800350e:	6a21      	ldr	r1, [r4, #32]
 8003510:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003512:	4643      	mov	r3, r8
 8003514:	463a      	mov	r2, r7
 8003516:	4628      	mov	r0, r5
 8003518:	47b0      	blx	r6
 800351a:	2800      	cmp	r0, #0
 800351c:	dc08      	bgt.n	8003530 <__sflush_r+0xfc>
 800351e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003530:	4407      	add	r7, r0
 8003532:	eba8 0800 	sub.w	r8, r8, r0
 8003536:	e7e7      	b.n	8003508 <__sflush_r+0xd4>
 8003538:	20400001 	.word	0x20400001

0800353c <_fflush_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	690b      	ldr	r3, [r1, #16]
 8003540:	4605      	mov	r5, r0
 8003542:	460c      	mov	r4, r1
 8003544:	b913      	cbnz	r3, 800354c <_fflush_r+0x10>
 8003546:	2500      	movs	r5, #0
 8003548:	4628      	mov	r0, r5
 800354a:	bd38      	pop	{r3, r4, r5, pc}
 800354c:	b118      	cbz	r0, 8003556 <_fflush_r+0x1a>
 800354e:	6a03      	ldr	r3, [r0, #32]
 8003550:	b90b      	cbnz	r3, 8003556 <_fflush_r+0x1a>
 8003552:	f7ff fc8f 	bl	8002e74 <__sinit>
 8003556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f3      	beq.n	8003546 <_fflush_r+0xa>
 800355e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003560:	07d0      	lsls	r0, r2, #31
 8003562:	d404      	bmi.n	800356e <_fflush_r+0x32>
 8003564:	0599      	lsls	r1, r3, #22
 8003566:	d402      	bmi.n	800356e <_fflush_r+0x32>
 8003568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800356a:	f7ff fe68 	bl	800323e <__retarget_lock_acquire_recursive>
 800356e:	4628      	mov	r0, r5
 8003570:	4621      	mov	r1, r4
 8003572:	f7ff ff5f 	bl	8003434 <__sflush_r>
 8003576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003578:	07da      	lsls	r2, r3, #31
 800357a:	4605      	mov	r5, r0
 800357c:	d4e4      	bmi.n	8003548 <_fflush_r+0xc>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	059b      	lsls	r3, r3, #22
 8003582:	d4e1      	bmi.n	8003548 <_fflush_r+0xc>
 8003584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003586:	f7ff fe5b 	bl	8003240 <__retarget_lock_release_recursive>
 800358a:	e7dd      	b.n	8003548 <_fflush_r+0xc>

0800358c <__swhatbuf_r>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	460c      	mov	r4, r1
 8003590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003594:	2900      	cmp	r1, #0
 8003596:	b096      	sub	sp, #88	@ 0x58
 8003598:	4615      	mov	r5, r2
 800359a:	461e      	mov	r6, r3
 800359c:	da0d      	bge.n	80035ba <__swhatbuf_r+0x2e>
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2340      	movne	r3, #64	@ 0x40
 80035ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035b0:	2000      	movs	r0, #0
 80035b2:	6031      	str	r1, [r6, #0]
 80035b4:	602b      	str	r3, [r5, #0]
 80035b6:	b016      	add	sp, #88	@ 0x58
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
 80035ba:	466a      	mov	r2, sp
 80035bc:	f000 f848 	bl	8003650 <_fstat_r>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	dbec      	blt.n	800359e <__swhatbuf_r+0x12>
 80035c4:	9901      	ldr	r1, [sp, #4]
 80035c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035ce:	4259      	negs	r1, r3
 80035d0:	4159      	adcs	r1, r3
 80035d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035d6:	e7eb      	b.n	80035b0 <__swhatbuf_r+0x24>

080035d8 <__smakebuf_r>:
 80035d8:	898b      	ldrh	r3, [r1, #12]
 80035da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035dc:	079d      	lsls	r5, r3, #30
 80035de:	4606      	mov	r6, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	d507      	bpl.n	80035f4 <__smakebuf_r+0x1c>
 80035e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	6123      	str	r3, [r4, #16]
 80035ec:	2301      	movs	r3, #1
 80035ee:	6163      	str	r3, [r4, #20]
 80035f0:	b003      	add	sp, #12
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f4:	ab01      	add	r3, sp, #4
 80035f6:	466a      	mov	r2, sp
 80035f8:	f7ff ffc8 	bl	800358c <__swhatbuf_r>
 80035fc:	9f00      	ldr	r7, [sp, #0]
 80035fe:	4605      	mov	r5, r0
 8003600:	4639      	mov	r1, r7
 8003602:	4630      	mov	r0, r6
 8003604:	f7ff fe8a 	bl	800331c <_malloc_r>
 8003608:	b948      	cbnz	r0, 800361e <__smakebuf_r+0x46>
 800360a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800360e:	059a      	lsls	r2, r3, #22
 8003610:	d4ee      	bmi.n	80035f0 <__smakebuf_r+0x18>
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	e7e2      	b.n	80035e4 <__smakebuf_r+0xc>
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	6020      	str	r0, [r4, #0]
 8003622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	9b01      	ldr	r3, [sp, #4]
 800362a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800362e:	b15b      	cbz	r3, 8003648 <__smakebuf_r+0x70>
 8003630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003634:	4630      	mov	r0, r6
 8003636:	f000 f81d 	bl	8003674 <_isatty_r>
 800363a:	b128      	cbz	r0, 8003648 <__smakebuf_r+0x70>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	81a3      	strh	r3, [r4, #12]
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	431d      	orrs	r5, r3
 800364c:	81a5      	strh	r5, [r4, #12]
 800364e:	e7cf      	b.n	80035f0 <__smakebuf_r+0x18>

08003650 <_fstat_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4d07      	ldr	r5, [pc, #28]	@ (8003670 <_fstat_r+0x20>)
 8003654:	2300      	movs	r3, #0
 8003656:	4604      	mov	r4, r0
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	f7fd f825 	bl	80006ac <_fstat>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	d102      	bne.n	800366c <_fstat_r+0x1c>
 8003666:	682b      	ldr	r3, [r5, #0]
 8003668:	b103      	cbz	r3, 800366c <_fstat_r+0x1c>
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	bd38      	pop	{r3, r4, r5, pc}
 800366e:	bf00      	nop
 8003670:	20000250 	.word	0x20000250

08003674 <_isatty_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4d06      	ldr	r5, [pc, #24]	@ (8003690 <_isatty_r+0x1c>)
 8003678:	2300      	movs	r3, #0
 800367a:	4604      	mov	r4, r0
 800367c:	4608      	mov	r0, r1
 800367e:	602b      	str	r3, [r5, #0]
 8003680:	f7fd f820 	bl	80006c4 <_isatty>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d102      	bne.n	800368e <_isatty_r+0x1a>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	b103      	cbz	r3, 800368e <_isatty_r+0x1a>
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	20000250 	.word	0x20000250

08003694 <_sbrk_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4d06      	ldr	r5, [pc, #24]	@ (80036b0 <_sbrk_r+0x1c>)
 8003698:	2300      	movs	r3, #0
 800369a:	4604      	mov	r4, r0
 800369c:	4608      	mov	r0, r1
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	f7fd f9f8 	bl	8000a94 <_sbrk>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_sbrk_r+0x1a>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_sbrk_r+0x1a>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	20000250 	.word	0x20000250

080036b4 <_init>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr

080036c0 <_fini>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr
